#include <xmmintrin.h>
#include <emmintrin.h>

#define SIMD_ARCH SIMD_ARCH_X86
#define SIMD_ENABLE (SIMD_SSE4)
#include <pik/pik_simd.h>

namespace dsp
{
	using namespace pik;

	using signal_vec_desc_t = SIMD_FULL(float);
	using signal_vec = signal_vec_desc_t::V;
	static inline constexpr signal_vec_desc_t signal_vec_desc;

	using signal_ivec_desc_t = SIMD_FULL(int32_t);
	using signal_ivec = signal_ivec_desc_t::V;
	static inline constexpr signal_ivec_desc_t signal_ivec_desc;

	using signal_uivec_desc_t = SIMD_FULL(uint32_t);
	using signal_uivec = signal_uivec_desc_t::V;
	static inline constexpr signal_uivec_desc_t signal_uivec_desc;

	/* SIMD (SSE1+MMX or SSE2) implementation of sin, cos, exp and log

	   Inspired by Intel Approximate Math library, and based on the
	   corresponding algorithms of the cephes math library

	   The default is to use the SSE1 version. If you define USE_SSE2 the
	   the SSE2 intrinsics will be used in place of the MMX intrinsics. Do
	   not expect any significant performance improvement with SSE2.
	*/

	/* Copyright (C) 2007  Julien Pommier

	  This software is provided 'as-is', without any express or implied
	  warranty.  In no event will the authors be held liable for any damages
	  arising from the use of this software.

	  Permission is granted to anyone to use this software for any purpose,
	  including commercial applications, and to alter it and redistribute it
	  freely, subject to the following restrictions:

	  1. The origin of this software must not be misrepresented; you must not
		 claim that you wrote the original software. If you use this software
		 in a product, an acknowledgment in the product documentation would be
		 appreciated but is not required.
	  2. Altered source versions must be plainly marked as such, and must not be
		 misrepresented as being the original software.
	  3. This notice may not be removed or altered from any source distribution.

	  (this is the zlib license)
	*/

	/* Copyright (C) 2019  Nathan Rausch
		
		Refactored to use pik_simd.
	*/
	template <typename T>
	inline signal_vec declare_const(T val)
	{
		return set1(signal_vec_desc, static_cast<signal_vec_desc_t::T>(val));
	}

	template <typename T>
	inline signal_ivec declare_iconst(T val)
	{
		return set1(signal_ivec_desc, static_cast<signal_ivec_desc_t::T>(val));
	}

	template <typename T>
	inline signal_vec declare_mask(T mask)
	{
		return cast_to(signal_vec_desc, set1(signal_uivec_desc, static_cast<signal_uivec_desc_t::T>(mask)));
	}
	
	static const signal_vec _ps_1	{ declare_const(1.0) };
	static const signal_vec _ps_0p5	{ declare_const(0.5) };
	
	static const signal_vec _ps_min_norm_pos	{ declare_mask(0x00800000) };
	static const signal_vec _ps_mant_mask		{ declare_mask(0x7f800000) };
	static const signal_vec _ps_inv_mant_mask	{ declare_mask(~0x7f800000) };
	static const signal_vec _ps_sign_mask		{ declare_mask(0x80000000) };
	static const signal_vec _ps_inv_sign_mask	{ declare_mask(~0x80000000) };

	static const signal_ivec _pi32_1		{ declare_iconst(1) };
	static const signal_ivec _pi32_inv1		{ declare_iconst(~1) };
	static const signal_ivec _pi32_2		{ declare_iconst(2) };
	static const signal_ivec _pi32_4		{ declare_iconst(4) };
	static const signal_ivec _pi32_0x7f		{ declare_iconst(0x7f) };
	
	static const signal_vec _ps_cephes_SQRTHF	{ declare_const(0.707106781186547524) };
	static const signal_vec _ps_cephes_log_p0	{ declare_const(7.0376836292E-2) };
	static const signal_vec _ps_cephes_log_p1	{ declare_const(-1.1514610310E-1) };
	static const signal_vec _ps_cephes_log_p2	{ declare_const(1.1676998740E-1) };
	static const signal_vec _ps_cephes_log_p3	{ declare_const(-1.2420140846E-1) };
	static const signal_vec _ps_cephes_log_p4	{ declare_const(+1.4249322787E-1) };
	static const signal_vec _ps_cephes_log_p5	{ declare_const(-1.6668057665E-1) };
	static const signal_vec _ps_cephes_log_p6	{ declare_const(+2.0000714765E-1) };
	static const signal_vec _ps_cephes_log_p7	{ declare_const(-2.4999993993E-1) };
	static const signal_vec _ps_cephes_log_p8	{ declare_const(+3.3333331174E-1) };
	static const signal_vec _ps_cephes_log_q1	{ declare_const(-2.12194440e-4) };
	static const signal_vec _ps_cephes_log_q2	{ declare_const(0.693359375) };

	signal_vec log_ps(signal_vec x)
	{
		signal_vec invalid_mask = (x <= setzero(signal_vec_desc));
		x = max(x, _ps_min_norm_pos);
		signal_ivec emm0 = cast_to(signal_ivec_desc, shift_right<23>(cast_to(signal_uivec_desc, x)));

		/* keep only the fractional part */
		x &= _ps_inv_mant_mask;
		x |= _ps_0p5;

		emm0 -= _pi32_0x7f;
		signal_vec e = convert_to(signal_vec_desc, emm0);

		e+=_ps_1;

		/* part2:
		   if( x < SQRTHF ) {
			 e -= 1;
			 x = x + x - 1.0;
		   } else { x = x - 1.0; }
		*/
		signal_vec mask = x < _ps_cephes_SQRTHF;
		signal_vec tmp = x & mask;
		x -= _ps_1;
		e -= _ps_1 & mask;
		x += tmp;

		signal_vec z = x * x;

		signal_vec y = _ps_cephes_log_p0;
		y *= x;
		y += _ps_cephes_log_p1;
		y *= x;
		y += _ps_cephes_log_p2;
		y *= x;
		y += _ps_cephes_log_p3;
		y *= x;
		y += _ps_cephes_log_p4;
		y *= x;
		y += _ps_cephes_log_p5;
		y *= x;
		y += _ps_cephes_log_p6;
		y *= x;
		y += _ps_cephes_log_p7;
		y *= x;
		y += _ps_cephes_log_p8;
		y *= x;

		y *= z;

		tmp = e * _ps_cephes_log_q1;
		y += tmp;


		tmp = z * _ps_0p5;
		y -= tmp;

		tmp = e * _ps_cephes_log_q2;
		x += y;
		x += tmp;
		x |= invalid_mask; // negative arg will be NAN
		return x;
	}

	static const signal_vec _ps_exp_hi			{ declare_const(88.3762626647949f) };
	static const signal_vec _ps_exp_lo			{ declare_const(-88.3762626647949f) };
	static const signal_vec _ps_cephes_LOG2EF	{ declare_const(1.44269504088896341) };
	static const signal_vec _ps_cephes_exp_C1	{ declare_const(0.693359375) };
	static const signal_vec _ps_cephes_exp_C2	{ declare_const(-2.12194440e-4) };
	static const signal_vec _ps_cephes_exp_p0	{ declare_const(1.9875691500E-4) };
	static const signal_vec _ps_cephes_exp_p1	{ declare_const(1.3981999507E-3) };
	static const signal_vec _ps_cephes_exp_p2	{ declare_const(8.3334519073E-3) };
	static const signal_vec _ps_cephes_exp_p3	{ declare_const(4.1665795894E-2) };
	static const signal_vec _ps_cephes_exp_p4	{ declare_const(1.6666665459E-1) };
	static const signal_vec _ps_cephes_exp_p5	{ declare_const(5.0000001201E-1) };

	signal_vec exp_ps(signal_vec x)
	{
		x = min(x, _ps_exp_hi);
		x = max(x, _ps_exp_lo);

		/* express exp(x) as exp(g + n*log(2)) */
		signal_vec fx = x * _ps_cephes_LOG2EF;
		fx *= _ps_0p5;

		/* how to perform a floorf with SSE: just below */
		signal_ivec emm0 = convert_to(signal_ivec_desc, fx);
		signal_vec tmp = convert_to(signal_vec_desc, emm0);
		
		/* if greater, substract 1 */
		signal_vec mask = tmp > fx;
		mask &= _ps_1;
		fx = tmp - mask;

		tmp = fx * _ps_cephes_exp_C1;
		signal_vec z = fx * _ps_cephes_exp_C2;
		x -= tmp;
		x -= z;

		z = x * x;

		signal_vec y = _ps_cephes_exp_p0;
		y *= x;
		y += _ps_cephes_exp_p1;
		y *= x;
		y += _ps_cephes_exp_p2;
		y *= x;
		y += _ps_cephes_exp_p3;
		y *= x;
		y += _ps_cephes_exp_p4;
		y *= x;
		y += _ps_cephes_exp_p5;
		y *= z;
		y += x;
		y += _ps_1;

		/* build 2^n */
		emm0 = convert_to(signal_ivec_desc, fx);
		emm0 += _pi32_0x7f;
		emm0 = shift_left<23>(emm0);
		signal_vec pow2n = cast_to(signal_vec_desc, emm0);
		y *= pow2n;

		return y;
	}

	static const signal_vec _ps_minus_cephes_DP1	{ declare_const(-0.78515625) };
	static const signal_vec _ps_minus_cephes_DP2	{ declare_const(-2.4187564849853515625e-4) };
	static const signal_vec _ps_minus_cephes_DP3	{ declare_const(-3.77489497744594108e-8) };
	static const signal_vec _ps_sincof_p0			{ declare_const(-1.9515295891E-4) };
	static const signal_vec _ps_sincof_p1			{ declare_const(8.3321608736E-3) };
	static const signal_vec _ps_sincof_p2			{ declare_const(-1.6666654611E-1) };
	static const signal_vec _ps_coscof_p0			{ declare_const(2.443315711809948E-005) };
	static const signal_vec _ps_coscof_p1			{ declare_const(-1.388731625493765E-003) };
	static const signal_vec _ps_coscof_p2			{ declare_const(4.166664568298827E-002) };
	static const signal_vec _ps_cephes_FOPI			{ declare_const(1.27323954473516) }; // 4 / M_PI

	signal_vec sin_ps(signal_vec x) 
	{
		signal_ivec emm0;

		signal_vec sign_bit = x;
		
		/* take the absolute value */
		x &= _ps_inv_sign_mask;

		/* extract the sign bit (upper one) */
		sign_bit &= _ps_sign_mask;

		signal_vec y = x * _ps_cephes_FOPI;

		/* store the integer part of y in mm0 */
		signal_ivec emm2 = convert_to(signal_ivec_desc, y);
		
		/* j=(j+1) & (~1) (see the cephes sources) */
		emm2 += _pi32_1;
		emm2 &= _pi32_inv1;
		y = convert_to(signal_vec_desc, emm2);

		/* get the swap sign flag */
		emm0 = emm2 & _pi32_4;
		emm0 = shift_left<29>(emm0);

		/* get the polynom selection mask
		   there is one polynom for 0 <= x <= Pi/4
		   and another one for Pi/4<x<=Pi/2

		   Both branches will be computed.
		*/
		emm2 &= _pi32_2;
		emm2 = (emm2 == setzero(signal_ivec_desc));

		signal_vec swap_sign_bit = cast_to(signal_vec_desc, emm0);
		signal_vec poly_mask = cast_to(signal_vec_desc, emm2);
		sign_bit ^= swap_sign_bit;

		/* The magic pass: "Extended precision modular arithmetic"
		   x = ((x - y * DP1) - y * DP2) - y * DP3; */
		signal_vec xmm1 = _ps_minus_cephes_DP1;
		signal_vec xmm2 = _ps_minus_cephes_DP2;
		signal_vec xmm3 = _ps_minus_cephes_DP3;
		xmm1 = y * xmm1;
		xmm2 = y * xmm2;
		xmm3 = y * xmm3;
		x += xmm1;
		x += xmm2;
		x += xmm3;

		/* Evaluate the first polynom  (0 <= x <= Pi/4) */
		y = _ps_coscof_p0;
		signal_vec z = x * x;

		y *= z;
		y += _ps_coscof_p1;
		y *= z;
		y += _ps_coscof_p2;
		y *= z;
		y *= z;
		signal_vec tmp = z * _ps_0p5;
		y -= tmp;
		y += _ps_1;

		/* Evaluate the second polynom  (Pi/4 <= x <= 0) */

		signal_vec y2 = _ps_sincof_p0;
		y2 *= z;
		y2 += _ps_sincof_p1;
		y2 *= z;
		y2 += _ps_sincof_p2;
		y2 *= z;
		y2 *= x;
		y2 += x;

		/* select the correct result from the two polynoms */
		xmm3 = poly_mask;
		y2 = xmm3 & y2; //, xmm3);
		y = andnot(xmm3, y);
		y += y2;
		/* update the sign */
		y ^= sign_bit;
		return y;
	}

	signal_vec cos_ps(signal_vec x)
	{		
		/* take the absolute value */
		x &= _ps_inv_sign_mask;

		/* scale by 4/Pi */
		signal_vec y = x * _ps_cephes_FOPI;

		/* store the integer part of y in mm0 */
		signal_ivec emm2 = convert_to(signal_ivec_desc, y);

		/* j=(j+1) & (~1) (see the cephes sources) */
		emm2 += _pi32_1;
		emm2 &= _pi32_inv1;
		y = convert_to(signal_vec_desc, emm2);

		emm2 -= _pi32_2;

		/* get the swap sign flag */
		signal_ivec emm0 = andnot(emm2, _pi32_4);
		emm0 = shift_left<29>(emm0);

		/* get the polynom selection mask */
		emm2 &= _pi32_2;
		emm2 = (emm2 == setzero(signal_ivec_desc));

		signal_vec sign_bit = cast_to(signal_vec_desc, emm0);
		signal_vec poly_mask = cast_to(signal_vec_desc, emm2);

		/* The magic pass: "Extended precision modular arithmetic"
		   x = ((x - y * DP1) - y * DP2) - y * DP3; */
		signal_vec xmm1 = _ps_minus_cephes_DP1;
		signal_vec xmm2 = _ps_minus_cephes_DP2;
		signal_vec xmm3 = _ps_minus_cephes_DP3;
		xmm1 = y * xmm1;
		xmm2 = y * xmm2;
		xmm3 = y * xmm3;
		x += xmm1;
		x += xmm2;
		x += xmm3;

		/* Evaluate the first polynom  (0 <= x <= Pi/4) */
		y = _ps_coscof_p0;
		signal_vec z = x * x;

		y *= z;
		y += _ps_coscof_p1;
		y *= z;
		y += _ps_coscof_p2;
		y *= z;
		y *= z;
		signal_vec tmp = z * _ps_0p5;
		y -= tmp;
		y += _ps_1;

		/* Evaluate the second polynom  (Pi/4 <= x <= 0) */

		signal_vec y2 = _ps_sincof_p0;
		y2 *= z;
		y2 += _ps_sincof_p1;
		y2 *= z;
		y2 += _ps_sincof_p2;
		y2 *= z;
		y2 *= x;
		y2 += x;

		/* select the correct result from the two polynoms */
		xmm3 = poly_mask;
		y2 = xmm3 & y2; //, xmm3);
		y = andnot(xmm3, y);
		y += y2;
		/* update the sign */
		y ^= sign_bit;

		return y;
	}

	void sincos_ps(signal_vec x, signal_vec* s, signal_vec* c)
	{
		signal_vec sign_bit_sin = x;

		/* take the absolute value */
		x &= _ps_inv_sign_mask;

		/* extract the sign bit (upper one) */
		sign_bit_sin &= _ps_sign_mask;

		/* scale by 4/Pi */
		signal_vec y = x * _ps_cephes_FOPI;

		/* store the integer part of y in emm2 */
		signal_ivec emm2 = convert_to(signal_ivec_desc, y);

		/* j=(j+1) & (~1) (see the cephes sources) */
		emm2 += _pi32_1;
		emm2 &= _pi32_inv1;
		y = convert_to(signal_vec_desc, emm2);

		signal_ivec emm4 = emm2;

		/* get the swap sign flag for the sine */
		signal_ivec emm0 = emm2 & _pi32_4;
		emm0 = shift_left<29>(emm0);
		signal_vec swap_sign_bit_sin = cast_to(signal_vec_desc, emm0);

		/* get the polynom selection mask for the sine*/
		emm2 &= _pi32_2;
		emm2 = (emm2 == setzero(signal_ivec_desc));
		signal_vec poly_mask = cast_to(signal_vec_desc, emm2);

		/* The magic pass: "Extended precision modular arithmetic"
		   x = ((x - y * DP1) - y * DP2) - y * DP3; */
		signal_vec xmm1 = _ps_minus_cephes_DP1;
		signal_vec xmm2 = _ps_minus_cephes_DP2;
		signal_vec xmm3 = _ps_minus_cephes_DP3;
		xmm1 = y * xmm1;
		xmm2 = y * xmm2;
		xmm3 = y * xmm3;
		x += xmm1;
		x += xmm2;
		x += xmm3;

		emm4 -= _pi32_2;
		emm4 = andnot(emm4, _pi32_4);
		emm4 = shift_left<29>(emm4);
		signal_vec sign_bit_cos = cast_to(signal_vec_desc, emm4);

		sign_bit_sin ^= swap_sign_bit_sin;


		/* Evaluate the first polynom  (0 <= x <= Pi/4) */
		signal_vec z = x * x;
		y = _ps_coscof_p0;

		y *= z;
		y += _ps_coscof_p1;
		y *= z;
		y += _ps_coscof_p2;
		y *= z;
		y *= z;
		signal_vec tmp = z * _ps_0p5;
		y -= tmp;
		y += _ps_1;

		/* Evaluate the second polynom  (Pi/4 <= x <= 0) */

		signal_vec y2 = _ps_sincof_p0;
		y2 *= z;
		y2 += _ps_sincof_p1;
		y2 *= z;
		y2 += _ps_sincof_p2;
		y2 *= z;
		y2 *= x;
		y2 += x;

		/* select the correct result from the two polynoms */
		xmm3 = poly_mask;
		signal_vec ysin2 = xmm3 & y2;
		signal_vec ysin1 = andnot(xmm3, y);
		y2 -= ysin2;
		y -= ysin1;

		xmm1 = ysin1 + ysin2;
		xmm2 = y + y2;

		/* update the sign */
		*s = xmm1 ^ sign_bit_sin;
		*c = xmm2 ^ sign_bit_cos;
	}

}

namespace ssemath
{
#ifdef _MSC_VER /* visual c++ */
# define ALIGN16_BEG __declspec(align(16))
# define ALIGN16_END 
#else /* gcc or icc */
# define ALIGN16_BEG
# define ALIGN16_END __attribute__((aligned(16)))
#endif

	/* declare some SSE constants -- why can't I figure a better way to do that? */
#define _PS_CONST(Name, Val)                                            \
  static const ALIGN16_BEG float _ps_##Name[4] ALIGN16_END = { static_cast<float>(Val), static_cast<float>(Val), static_cast<float>(Val), static_cast<float>(Val) }
#define _PI32_CONST(Name, Val)                                            \
  static const ALIGN16_BEG int _pi32_##Name[4] ALIGN16_END = { Val, Val, Val, Val }
#define _PS_CONST_TYPE(Name, Type, Val)                                 \
  static const ALIGN16_BEG Type _ps_##Name[4] ALIGN16_END = { Val, Val, Val, Val }

	_PS_CONST(1, 1.0f);
	_PS_CONST(0p5, 0.5f);
	/* the smallest non denormalized float number */
	_PS_CONST_TYPE(min_norm_pos, int, 0x00800000);
	_PS_CONST_TYPE(mant_mask, int, 0x7f800000);
	_PS_CONST_TYPE(inv_mant_mask, int, ~0x7f800000);

	_PS_CONST_TYPE(sign_mask, int, (int)0x80000000);
	_PS_CONST_TYPE(inv_sign_mask, int, ~0x80000000);

	_PI32_CONST(1, 1);
	_PI32_CONST(inv1, ~1);
	_PI32_CONST(2, 2);
	_PI32_CONST(4, 4);
	_PI32_CONST(0x7f, 0x7f);

	_PS_CONST(cephes_SQRTHF, 0.707106781186547524);
	_PS_CONST(cephes_log_p0, 7.0376836292E-2);
	_PS_CONST(cephes_log_p1, -1.1514610310E-1);
	_PS_CONST(cephes_log_p2, 1.1676998740E-1);
	_PS_CONST(cephes_log_p3, -1.2420140846E-1);
	_PS_CONST(cephes_log_p4, +1.4249322787E-1);
	_PS_CONST(cephes_log_p5, -1.6668057665E-1);
	_PS_CONST(cephes_log_p6, +2.0000714765E-1);
	_PS_CONST(cephes_log_p7, -2.4999993993E-1);
	_PS_CONST(cephes_log_p8, +3.3333331174E-1);
	_PS_CONST(cephes_log_q1, -2.12194440e-4);
	_PS_CONST(cephes_log_q2, 0.693359375);

	/* natural logarithm computed for 4 simultaneous float
	   return NaN for x <= 0
	*/
	__m128 log_ps(__m128 x) {
		__m128i emm0;
		__m128 one = *(__m128*)_ps_1;

		__m128 invalid_mask = _mm_cmple_ps(x, _mm_setzero_ps());

		x = _mm_max_ps(x, *(__m128*)_ps_min_norm_pos);  /* cut off denormalized stuff */

		emm0 = _mm_srli_epi32(_mm_castps_si128(x), 23);

		/* keep only the fractional part */
		x = _mm_and_ps(x, *(__m128*)_ps_inv_mant_mask);
		x = _mm_or_ps(x, *(__m128*)_ps_0p5);

		emm0 = _mm_sub_epi32(emm0, *(__m128i*)_pi32_0x7f);
		__m128 e = _mm_cvtepi32_ps(emm0);

		e = _mm_add_ps(e, one);

		/* part2:
		   if( x < SQRTHF ) {
			 e -= 1;
			 x = x + x - 1.0;
		   } else { x = x - 1.0; }
		*/
		__m128 mask = _mm_cmplt_ps(x, *(__m128*)_ps_cephes_SQRTHF);
		__m128 tmp = _mm_and_ps(x, mask);
		x = _mm_sub_ps(x, one);
		e = _mm_sub_ps(e, _mm_and_ps(one, mask));
		x = _mm_add_ps(x, tmp);


		__m128 z = _mm_mul_ps(x, x);

		__m128 y = *(__m128*)_ps_cephes_log_p0;
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_log_p1);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_log_p2);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_log_p3);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_log_p4);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_log_p5);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_log_p6);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_log_p7);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_log_p8);
		y = _mm_mul_ps(y, x);

		y = _mm_mul_ps(y, z);


		tmp = _mm_mul_ps(e, *(__m128*)_ps_cephes_log_q1);
		y = _mm_add_ps(y, tmp);


		tmp = _mm_mul_ps(z, *(__m128*)_ps_0p5);
		y = _mm_sub_ps(y, tmp);

		tmp = _mm_mul_ps(e, *(__m128*)_ps_cephes_log_q2);
		x = _mm_add_ps(x, y);
		x = _mm_add_ps(x, tmp);
		x = _mm_or_ps(x, invalid_mask); // negative arg will be NAN
		return x;
	}

	_PS_CONST(exp_hi, 88.3762626647949f);
	_PS_CONST(exp_lo, -88.3762626647949f);

	_PS_CONST(cephes_LOG2EF, 1.44269504088896341);
	_PS_CONST(cephes_exp_C1, 0.693359375);
	_PS_CONST(cephes_exp_C2, -2.12194440e-4);

	_PS_CONST(cephes_exp_p0, 1.9875691500E-4);
	_PS_CONST(cephes_exp_p1, 1.3981999507E-3);
	_PS_CONST(cephes_exp_p2, 8.3334519073E-3);
	_PS_CONST(cephes_exp_p3, 4.1665795894E-2);
	_PS_CONST(cephes_exp_p4, 1.6666665459E-1);
	_PS_CONST(cephes_exp_p5, 5.0000001201E-1);

	__m128 exp_ps(__m128 x) {
		__m128 tmp = _mm_setzero_ps(), fx;
		__m128i emm0;
		__m128 one = *(__m128*)_ps_1;

		x = _mm_min_ps(x, *(__m128*)_ps_exp_hi);
		x = _mm_max_ps(x, *(__m128*)_ps_exp_lo);

		/* express exp(x) as exp(g + n*log(2)) */
		fx = _mm_mul_ps(x, *(__m128*)_ps_cephes_LOG2EF);
		fx = _mm_add_ps(fx, *(__m128*)_ps_0p5);

		/* how to perform a floorf with SSE: just below */
		emm0 = _mm_cvttps_epi32(fx);
		tmp = _mm_cvtepi32_ps(emm0);
		/* if greater, substract 1 */
		__m128 mask = _mm_cmpgt_ps(tmp, fx);
		mask = _mm_and_ps(mask, one);
		fx = _mm_sub_ps(tmp, mask);

		tmp = _mm_mul_ps(fx, *(__m128*)_ps_cephes_exp_C1);
		__m128 z = _mm_mul_ps(fx, *(__m128*)_ps_cephes_exp_C2);
		x = _mm_sub_ps(x, tmp);
		x = _mm_sub_ps(x, z);

		z = _mm_mul_ps(x, x);

		__m128 y = *(__m128*)_ps_cephes_exp_p0;
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_exp_p1);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_exp_p2);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_exp_p3);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_exp_p4);
		y = _mm_mul_ps(y, x);
		y = _mm_add_ps(y, *(__m128*)_ps_cephes_exp_p5);
		y = _mm_mul_ps(y, z);
		y = _mm_add_ps(y, x);
		y = _mm_add_ps(y, one);

		/* build 2^n */
		emm0 = _mm_cvttps_epi32(fx);
		emm0 = _mm_add_epi32(emm0, *(__m128i*)_pi32_0x7f);
		emm0 = _mm_slli_epi32(emm0, 23);
		__m128 pow2n = _mm_castsi128_ps(emm0);
		y = _mm_mul_ps(y, pow2n);
		return y;
	}

	_PS_CONST(minus_cephes_DP1, -0.78515625);
	_PS_CONST(minus_cephes_DP2, -2.4187564849853515625e-4);
	_PS_CONST(minus_cephes_DP3, -3.77489497744594108e-8);
	_PS_CONST(sincof_p0, -1.9515295891E-4);
	_PS_CONST(sincof_p1, 8.3321608736E-3);
	_PS_CONST(sincof_p2, -1.6666654611E-1);
	_PS_CONST(coscof_p0, 2.443315711809948E-005);
	_PS_CONST(coscof_p1, -1.388731625493765E-003);
	_PS_CONST(coscof_p2, 4.166664568298827E-002);
	_PS_CONST(cephes_FOPI, 1.27323954473516); // 4 / M_PI


	/* evaluation of 4 sines at onces, using only SSE1+MMX intrinsics so
	   it runs also on old athlons XPs and the pentium III of your grand
	   mother.

	   The code is the exact rewriting of the cephes sinf function.
	   Precision is excellent as long as x < 8192 (I did not bother to
	   take into account the special handling they have for greater values
	   -- it does not return garbage for arguments over 8192, though, but
	   the extra precision is missing).

	   Note that it is such that sinf((float)M_PI) = 8.74e-8, which is the
	   surprising but correct result.

	   Performance is also surprisingly good, 1.33 times faster than the
	   macos vsinf SSE2 function, and 1.5 times faster than the
	   __vrs4_sinf of amd's ACML (which is only available in 64 bits). Not
	   too bad for an SSE1 function (with no special tuning) !
	   However the latter libraries probably have a much better handling of NaN,
	   Inf, denormalized and other special arguments..

	   On my core 1 duo, the execution of this function takes approximately 95 cycles.

	   From what I have observed on the experiments with Intel AMath lib, switching to an
	   SSE2 version would improve the perf by only 10%.

	   Since it is based on SSE intrinsics, it has to be compiled at -O2 to
	   deliver full speed.
	*/
	__m128 sin_ps(__m128 x) { // any x
		__m128 xmm1, xmm2 = _mm_setzero_ps(), xmm3, sign_bit, y;

		__m128i emm0, emm2;
		sign_bit = x;
		/* take the absolute value */
		x = _mm_and_ps(x, *(__m128*)_ps_inv_sign_mask);
		/* extract the sign bit (upper one) */
		sign_bit = _mm_and_ps(sign_bit, *(__m128*)_ps_sign_mask);

		/* scale by 4/Pi */
		y = _mm_mul_ps(x, *(__m128*)_ps_cephes_FOPI);

		/* store the integer part of y in mm0 */
		emm2 = _mm_cvttps_epi32(y);
		/* j=(j+1) & (~1) (see the cephes sources) */
		emm2 = _mm_add_epi32(emm2, *(__m128i*)_pi32_1);
		emm2 = _mm_and_si128(emm2, *(__m128i*)_pi32_inv1);
		y = _mm_cvtepi32_ps(emm2);

		/* get the swap sign flag */
		emm0 = _mm_and_si128(emm2, *(__m128i*)_pi32_4);
		emm0 = _mm_slli_epi32(emm0, 29);
		/* get the polynom selection mask
		   there is one polynom for 0 <= x <= Pi/4
		   and another one for Pi/4<x<=Pi/2

		   Both branches will be computed.
		*/
		emm2 = _mm_and_si128(emm2, *(__m128i*)_pi32_2);
		emm2 = _mm_cmpeq_epi32(emm2, _mm_setzero_si128());

		__m128 swap_sign_bit = _mm_castsi128_ps(emm0);
		__m128 poly_mask = _mm_castsi128_ps(emm2);
		sign_bit = _mm_xor_ps(sign_bit, swap_sign_bit);

		/* The magic pass: "Extended precision modular arithmetic"
		   x = ((x - y * DP1) - y * DP2) - y * DP3; */
		xmm1 = *(__m128*)_ps_minus_cephes_DP1;
		xmm2 = *(__m128*)_ps_minus_cephes_DP2;
		xmm3 = *(__m128*)_ps_minus_cephes_DP3;
		xmm1 = _mm_mul_ps(y, xmm1);
		xmm2 = _mm_mul_ps(y, xmm2);
		xmm3 = _mm_mul_ps(y, xmm3);
		x = _mm_add_ps(x, xmm1);
		x = _mm_add_ps(x, xmm2);
		x = _mm_add_ps(x, xmm3);

		/* Evaluate the first polynom  (0 <= x <= Pi/4) */
		y = *(__m128*)_ps_coscof_p0;
		__m128 z = _mm_mul_ps(x, x);

		y = _mm_mul_ps(y, z);
		y = _mm_add_ps(y, *(__m128*)_ps_coscof_p1);
		y = _mm_mul_ps(y, z);
		y = _mm_add_ps(y, *(__m128*)_ps_coscof_p2);
		y = _mm_mul_ps(y, z);
		y = _mm_mul_ps(y, z);
		__m128 tmp = _mm_mul_ps(z, *(__m128*)_ps_0p5);
		y = _mm_sub_ps(y, tmp);
		y = _mm_add_ps(y, *(__m128*)_ps_1);

		/* Evaluate the second polynom  (Pi/4 <= x <= 0) */

		__m128 y2 = *(__m128*)_ps_sincof_p0;
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_add_ps(y2, *(__m128*)_ps_sincof_p1);
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_add_ps(y2, *(__m128*)_ps_sincof_p2);
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_mul_ps(y2, x);
		y2 = _mm_add_ps(y2, x);

		/* select the correct result from the two polynoms */
		xmm3 = poly_mask;
		y2 = _mm_and_ps(xmm3, y2); //, xmm3);
		y = _mm_andnot_ps(xmm3, y);
		y = _mm_add_ps(y, y2);
		/* update the sign */
		y = _mm_xor_ps(y, sign_bit);
		return y;
	}

	/* almost the same as sin_ps */
	__m128 cos_ps(__m128 x) { // any x
		__m128 xmm1, xmm2 = _mm_setzero_ps(), xmm3, y;
		__m128i emm0, emm2;
		/* take the absolute value */
		x = _mm_and_ps(x, *(__m128*)_ps_inv_sign_mask);

		/* scale by 4/Pi */
		y = _mm_mul_ps(x, *(__m128*)_ps_cephes_FOPI);

		/* store the integer part of y in mm0 */
		emm2 = _mm_cvttps_epi32(y);
		/* j=(j+1) & (~1) (see the cephes sources) */
		emm2 = _mm_add_epi32(emm2, *(__m128i*)_pi32_1);
		emm2 = _mm_and_si128(emm2, *(__m128i*)_pi32_inv1);
		y = _mm_cvtepi32_ps(emm2);

		emm2 = _mm_sub_epi32(emm2, *(__m128i*)_pi32_2);

		/* get the swap sign flag */
		emm0 = _mm_andnot_si128(emm2, *(__m128i*)_pi32_4);
		emm0 = _mm_slli_epi32(emm0, 29);
		/* get the polynom selection mask */
		emm2 = _mm_and_si128(emm2, *(__m128i*)_pi32_2);
		emm2 = _mm_cmpeq_epi32(emm2, _mm_setzero_si128());

		__m128 sign_bit = _mm_castsi128_ps(emm0);
		__m128 poly_mask = _mm_castsi128_ps(emm2);
		/* The magic pass: "Extended precision modular arithmetic"
		   x = ((x - y * DP1) - y * DP2) - y * DP3; */
		xmm1 = *(__m128*)_ps_minus_cephes_DP1;
		xmm2 = *(__m128*)_ps_minus_cephes_DP2;
		xmm3 = *(__m128*)_ps_minus_cephes_DP3;
		xmm1 = _mm_mul_ps(y, xmm1);
		xmm2 = _mm_mul_ps(y, xmm2);
		xmm3 = _mm_mul_ps(y, xmm3);
		x = _mm_add_ps(x, xmm1);
		x = _mm_add_ps(x, xmm2);
		x = _mm_add_ps(x, xmm3);

		/* Evaluate the first polynom  (0 <= x <= Pi/4) */
		y = *(__m128*)_ps_coscof_p0;
		__m128 z = _mm_mul_ps(x, x);

		y = _mm_mul_ps(y, z);
		y = _mm_add_ps(y, *(__m128*)_ps_coscof_p1);
		y = _mm_mul_ps(y, z);
		y = _mm_add_ps(y, *(__m128*)_ps_coscof_p2);
		y = _mm_mul_ps(y, z);
		y = _mm_mul_ps(y, z);
		__m128 tmp = _mm_mul_ps(z, *(__m128*)_ps_0p5);
		y = _mm_sub_ps(y, tmp);
		y = _mm_add_ps(y, *(__m128*)_ps_1);

		/* Evaluate the second polynom  (Pi/4 <= x <= 0) */

		__m128 y2 = *(__m128*)_ps_sincof_p0;
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_add_ps(y2, *(__m128*)_ps_sincof_p1);
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_add_ps(y2, *(__m128*)_ps_sincof_p2);
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_mul_ps(y2, x);
		y2 = _mm_add_ps(y2, x);

		/* select the correct result from the two polynoms */
		xmm3 = poly_mask;
		y2 = _mm_and_ps(xmm3, y2); //, xmm3);
		y = _mm_andnot_ps(xmm3, y);
		y = _mm_add_ps(y, y2);
		/* update the sign */
		y = _mm_xor_ps(y, sign_bit);

		return y;
	}

	/* since sin_ps and cos_ps are almost identical, sincos_ps could replace both of them..
	   it is almost as fast, and gives you a free cosine with your sine */
	void sincos_ps(__m128 x, __m128* s, __m128* c) {
		__m128 xmm1, xmm2, xmm3 = _mm_setzero_ps(), sign_bit_sin, y;
		__m128i emm0, emm2, emm4;
		sign_bit_sin = x;
		/* take the absolute value */
		x = _mm_and_ps(x, *(__m128*)_ps_inv_sign_mask);
		/* extract the sign bit (upper one) */
		sign_bit_sin = _mm_and_ps(sign_bit_sin, *(__m128*)_ps_sign_mask);

		/* scale by 4/Pi */
		y = _mm_mul_ps(x, *(__m128*)_ps_cephes_FOPI);

		/* store the integer part of y in emm2 */
		emm2 = _mm_cvttps_epi32(y);

		/* j=(j+1) & (~1) (see the cephes sources) */
		emm2 = _mm_add_epi32(emm2, *(__m128i*)_pi32_1);
		emm2 = _mm_and_si128(emm2, *(__m128i*)_pi32_inv1);
		y = _mm_cvtepi32_ps(emm2);

		emm4 = emm2;

		/* get the swap sign flag for the sine */
		emm0 = _mm_and_si128(emm2, *(__m128i*)_pi32_4);
		emm0 = _mm_slli_epi32(emm0, 29);
		__m128 swap_sign_bit_sin = _mm_castsi128_ps(emm0);

		/* get the polynom selection mask for the sine*/
		emm2 = _mm_and_si128(emm2, *(__m128i*)_pi32_2);
		emm2 = _mm_cmpeq_epi32(emm2, _mm_setzero_si128());
		__m128 poly_mask = _mm_castsi128_ps(emm2);

		/* The magic pass: "Extended precision modular arithmetic"
		   x = ((x - y * DP1) - y * DP2) - y * DP3; */
		xmm1 = *(__m128*)_ps_minus_cephes_DP1;
		xmm2 = *(__m128*)_ps_minus_cephes_DP2;
		xmm3 = *(__m128*)_ps_minus_cephes_DP3;
		xmm1 = _mm_mul_ps(y, xmm1);
		xmm2 = _mm_mul_ps(y, xmm2);
		xmm3 = _mm_mul_ps(y, xmm3);
		x = _mm_add_ps(x, xmm1);
		x = _mm_add_ps(x, xmm2);
		x = _mm_add_ps(x, xmm3);

		emm4 = _mm_sub_epi32(emm4, *(__m128i*)_pi32_2);
		emm4 = _mm_andnot_si128(emm4, *(__m128i*)_pi32_4);
		emm4 = _mm_slli_epi32(emm4, 29);
		__m128 sign_bit_cos = _mm_castsi128_ps(emm4);

		sign_bit_sin = _mm_xor_ps(sign_bit_sin, swap_sign_bit_sin);


		/* Evaluate the first polynom  (0 <= x <= Pi/4) */
		__m128 z = _mm_mul_ps(x, x);
		y = *(__m128*)_ps_coscof_p0;

		y = _mm_mul_ps(y, z);
		y = _mm_add_ps(y, *(__m128*)_ps_coscof_p1);
		y = _mm_mul_ps(y, z);
		y = _mm_add_ps(y, *(__m128*)_ps_coscof_p2);
		y = _mm_mul_ps(y, z);
		y = _mm_mul_ps(y, z);
		__m128 tmp = _mm_mul_ps(z, *(__m128*)_ps_0p5);
		y = _mm_sub_ps(y, tmp);
		y = _mm_add_ps(y, *(__m128*)_ps_1);

		/* Evaluate the second polynom  (Pi/4 <= x <= 0) */

		__m128 y2 = *(__m128*)_ps_sincof_p0;
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_add_ps(y2, *(__m128*)_ps_sincof_p1);
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_add_ps(y2, *(__m128*)_ps_sincof_p2);
		y2 = _mm_mul_ps(y2, z);
		y2 = _mm_mul_ps(y2, x);
		y2 = _mm_add_ps(y2, x);

		/* select the correct result from the two polynoms */
		xmm3 = poly_mask;
		__m128 ysin2 = _mm_and_ps(xmm3, y2);
		__m128 ysin1 = _mm_andnot_ps(xmm3, y);
		y2 = _mm_sub_ps(y2, ysin2);
		y = _mm_sub_ps(y, ysin1);

		xmm1 = _mm_add_ps(ysin1, ysin2);
		xmm2 = _mm_add_ps(y, y2);

		/* update the sign */
		*s = _mm_xor_ps(xmm1, sign_bit_sin);
		*c = _mm_xor_ps(xmm2, sign_bit_cos);
	}
}

void test_approximations()
{
	constexpr uint32_t num_points = 256;

	static __declspec(align(64)) float log_dest[num_points];
	static __declspec(align(64)) float log_src[num_points];
	{
		constexpr float step = 10.0f / static_cast<float>(num_points);
		float v = step;
		for (uint32_t i = 0; i < num_points; ++i)
		{
			log_src[i] = v;
			v += step;
		}
	}

	static __declspec(align(64)) float exp_dest[num_points];
	static __declspec(align(64)) float exp_src[num_points];
	{
		constexpr float step = 4.0f / static_cast<float>(num_points);
		float v = -2.0f;
		for (uint32_t i = 0; i < num_points; ++i)
		{
			exp_src[i] = v;
			v += step;
		}
	}

	static __declspec(align(64)) float sin_dest[num_points];
	static __declspec(align(64)) float sin_src[num_points];
	{
		constexpr float step = (3.1415926535f * 2.0f) / static_cast<float>(num_points);
		float v = 0.0f;
		for (uint32_t i = 0; i < num_points; ++i)
		{
			sin_src[i] = v;
			v += step;
		}
	}

	static __declspec(align(64)) float cos_dest[num_points];
	static __declspec(align(64)) float cos_src[num_points];
	{
		constexpr float step = (3.1415926535f * 2.0f) / static_cast<float>(num_points);
		float v = 0.0f;
		for (uint32_t i = 0; i < num_points; ++i)
		{
			cos_src[i] = v;
			v += step;
		}
	}

	static __declspec(align(64)) float sincos_dest_sin[num_points];
	static __declspec(align(64)) float sincos_dest_cos[num_points];
	static __declspec(align(64)) float sincos_src[num_points];
	{
		constexpr float step = (3.1415926535f * 2.0f) / static_cast<float>(num_points);
		float v = 0.0f;
		for (uint32_t i = 0; i < num_points; ++i)
		{
			sincos_src[i] = v;
			v += step;
		}
	}

	::memset(log_dest, 0, sizeof(log_dest));
	{
		auto src_vec = reinterpret_cast<const __m128*>(&log_src[0]);
		auto dest_vec = reinterpret_cast<__m128*>(&log_dest[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dest_vec[i] = ssemath::log_ps(src_vec[i]);
		}
	}

	::memset(exp_dest, 0, sizeof(exp_dest));
	{
		auto src_vec = reinterpret_cast<const __m128*>(&exp_src[0]);
		auto dest_vec = reinterpret_cast<__m128*>(&exp_dest[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dest_vec[i] = ssemath::exp_ps(src_vec[i]);
		}
	}

	::memset(sin_dest, 0, sizeof(sin_dest));
	{
		auto src_vec = reinterpret_cast<const __m128*>(&sin_src[0]);
		auto dest_vec = reinterpret_cast<__m128*>(&sin_dest[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dest_vec[i] = ssemath::sin_ps(src_vec[i]);
		}
	}

	::memset(cos_dest, 0, sizeof(cos_dest));
	{
		auto src_vec = reinterpret_cast<const __m128*>(&cos_src[0]);
		auto dest_vec = reinterpret_cast<__m128*>(&cos_dest[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dest_vec[i] = ssemath::cos_ps(src_vec[i]);
		}
	}

	::memset(sincos_dest_sin, 0, sizeof(sincos_dest_sin));
	::memset(sincos_dest_cos, 0, sizeof(sincos_dest_cos));
	{
		auto src_vec = reinterpret_cast<const __m128*>(&sincos_src[0]);
		auto dest_vec_sin = reinterpret_cast<__m128*>(&sincos_dest_sin[0]);
		auto dest_vec_cos = reinterpret_cast<__m128*>(&sincos_dest_cos[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			ssemath::sincos_ps(src_vec[i], dest_vec_sin + i, dest_vec_cos + i);
		}
	}

	ImGui::Begin("ssemath plot");
	{
		ImGui::PlotLines("ssemath::log_ps", log_dest, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
		ImGui::PlotLines("ssemath::exp_ps", exp_dest, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
		ImGui::PlotLines("ssemath::sin_ps", sin_dest, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
		ImGui::PlotLines("ssemath::cos_ps", cos_dest, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));

		ImGui::PlotLines("ssemath::sincos_ps::cos", sincos_dest_cos, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
		ImGui::PlotLines("ssemath::sincos_ps::sin", sincos_dest_sin, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
	}
	ImGui::End();

	::memset(log_dest, 0, sizeof(log_dest));
	{
		auto src_vec = reinterpret_cast<const dsp::signal_vec*>(&log_src[0]);
		auto dest_vec = reinterpret_cast<dsp::signal_vec*>(&log_dest[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dest_vec[i] = dsp::log_ps(src_vec[i]);
		}
	}

	::memset(exp_dest, 0, sizeof(exp_dest));
	{
		auto src_vec = reinterpret_cast<const dsp::signal_vec*>(&exp_src[0]);
		auto dest_vec = reinterpret_cast<dsp::signal_vec*>(&exp_dest[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dest_vec[i] = dsp::exp_ps(src_vec[i]);
		}
	}

	::memset(sin_dest, 0, sizeof(sin_dest));
	{
		auto src_vec = reinterpret_cast<const dsp::signal_vec*>(&sin_src[0]);
		auto dest_vec = reinterpret_cast<dsp::signal_vec*>(&sin_dest[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dest_vec[i] = dsp::sin_ps(src_vec[i]);
		}
	}

	::memset(cos_dest, 0, sizeof(cos_dest));
	{
		auto src_vec = reinterpret_cast<const dsp::signal_vec*>(&cos_src[0]);
		auto dest_vec = reinterpret_cast<dsp::signal_vec*>(&cos_dest[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dest_vec[i] = dsp::cos_ps(src_vec[i]);
		}
	}

	::memset(sincos_dest_sin, 0, sizeof(sincos_dest_sin));
	::memset(sincos_dest_cos, 0, sizeof(sincos_dest_cos));
	{
		auto src_vec = reinterpret_cast<const dsp::signal_vec*>(&sincos_src[0]);
		auto dest_vec_sin = reinterpret_cast<dsp::signal_vec*>(&sincos_dest_sin[0]);
		auto dest_vec_cos = reinterpret_cast<dsp::signal_vec*>(&sincos_dest_cos[0]);
		for (int i = 0; i < num_points / 4; ++i)
		{
			dsp::sincos_ps(src_vec[i], dest_vec_sin + i, dest_vec_cos + i);
		}
	}

	ImGui::Begin("dsp plot");
	{
		ImGui::PlotLines("dsp::log_ps", log_dest, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
		ImGui::PlotLines("dsp::exp_ps", exp_dest, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
		ImGui::PlotLines("dsp::sin_ps", sin_dest, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
		ImGui::PlotLines("dsp::cos_ps", cos_dest, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));

		ImGui::PlotLines("dsp::sincos_ps::cos", sincos_dest_cos, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
		ImGui::PlotLines("dsp::sincos_ps::sin", sincos_dest_sin, num_points, 0, nullptr, FLT_MAX, FLT_MAX, ImVec2(512, 256));
	}
	ImGui::End();
}
